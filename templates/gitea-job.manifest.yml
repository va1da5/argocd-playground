---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-orchestrate
  namespace: gitea
data:
  requirements.txt: |
    requests==2.31.0

  job.py: |
    import requests

    HOST = "{{ host }}"
    USERNAME = "{{ username }}"
    PASSWORD = "{{ password }}"


    def authenticate(
        session: requests.Session, username: str = None, password: str = None
    ) -> requests.Response:
        data = {
            "_csrf": session.cookies.get("_csrf"),
            "user_name": username,
            "password": password,
        }

        return session.post(f"{HOST}/user/login", data=data)


    def create_org(session: requests.Session, name: str) -> requests.Response:
        data = {
            "_csrf": session.cookies.get("_csrf"),
            "org_name": name,
            "visibility": 0,
            "repo_admin_change_team_access": "on",
        }

        return session.post(f"{HOST}/org/create", data=data)


    def add_member(session: requests.Session, org: str, username: str) -> requests.Response:
        data = {"_csrf": session.cookies.get("_csrf"), "uid": 1, "uname": username}
        return session.post(f"{HOST}/org/{org}/teams/owners/action/add", data=data)


    def create_user(
        session: requests.Session, username: str, password: str
    ) -> requests.Response:
        data = {
            "_csrf": session.cookies.get("_csrf"),
            "login_type": "0-0",
            "visibility": 0,
            "login_name": "",
            "user_name": username,
            "email": f"{username}@gitea.local",
            "password": password,
        }

        return session.post(f"{HOST}/admin/users/new", data=data)


    def create_repo(session: requests.Session, name: str) -> requests.Response:
        data = {
            "_csrf": session.cookies.get("_csrf"),
            "uid": 2,
            "repo_name": name,
            "description": "",
            "repo_template": "",
            "issue_labels": "",
            "gitignores": "",
            "license": "",
            "readme": "Default",
            "default_branch": "main",
            "trust_model": "default",
        }

        return session.post(f"{HOST}/repo/create", data=data)


    def validate(response: requests.Response):
        if response.status_code >= 400:
            print(response.headers)
            print(response.text)
            raise RuntimeError(response.text)


    def main():
        session = requests.Session()
        session.get(HOST)

        validate(authenticate(session, username=USERNAME, password=PASSWORD))
        validate(create_org(session, name="main"))

        validate(create_repo(session, "gitops"))
        validate(create_repo(session, "demo-app"))

        validate(create_user(session, username="gitops", password="gitops"))
        validate(add_member(session, org="main", username="gitops"))

        print("Done!")


    if __name__ == "__main__":
        main()

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-gitops-demo
  namespace: gitea
data:
  deploy.yml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: demo-deployment
      labels:
        app: alpine
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: alpine
      template:
        metadata:
          labels:
            app: alpine
        spec:
          containers:
          - name: alpine
            image: alpine:latest
            command: ["sh"]
            args:
              - -c
              - echo "Hello World!" && sleep 365d

  README.md: |
    # GitOps DEMO Repo

    The repository serves as an initial point for conducting additional tests on the integration of GitOps with ArgoCD and Kubernetes.

  push.sh: |
    #!/usr/bin/bash

    apt update
    apt install -y git

    git config --global user.email "admin@gitea-http.gitea.svc"
    git config --global user.name "Gitea"
    git config --global init.defaultBranch main

    export TMP_DIR=/tmp/gitops

    mkdir ${TMP_DIR}

    cp README.md ${TMP_DIR}
    cp deploy.yml ${TMP_DIR}

    cd ${TMP_DIR}

    git init
    git add .
    git commit -m "first commit"
    git remote add origin http://gitea-http.gitea.svc:3000/main/gitops.git
    git push -u origin main

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-app-demo
  namespace: gitea
data:
  Dockerfile: |
    FROM python:3.11.4-slim

    WORKDIR /app

    COPY ./requirements.txt /app/requirements.txt

    RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

    COPY . /app

    CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

    # If running behind a proxy like Nginx or Traefik add --proxy-headers
    # CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]

  README.md: |
    # DEMO App Repo

    The repository hosts the source code for a basic REST API, accompanied by instructions for building and deploying the application using containers.


    ## Repo Links:

      - [http://localhost:3000/main/demo-app.git](http://localhost:3000/main/demo-app.git) - local
      - [http://gitea-http.gitea.svc:3000/main/demo-app.git](http://gitea-http.gitea.svc:3000/main/demo-app.git) - within Kubernetes

  Jenkinsfile: |
    pipeline {
      agent {
        kubernetes {
          yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
                name: docker
                namespace: jenkins
            spec:
              containers:
              - name: docker
                image: docker:git
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /var/run/docker.sock
                  name: docker-sock
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            '''
        }
      }
      stages {
        stage('Clone') {
          steps {
            container('docker') {
              git branch: 'main', changelog: false, poll: false, url: 'http://gitea-http.gitea.svc:3000/main/demo-app.git'
            }
          }
        }  
        stage('Build-Docker-Image') {
          steps {
            container('docker') {
              sh 'docker build -t local/api-demo:latest .'
            }
          }
        }
      }
    }

  main.py: |
    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/")
    def read_root():
        return {"Hello": "DevOps!"}

  requirements.txt: |
    fastapi>=0.68.0,<0.69.0
    pydantic>=1.8.0,<2.0.0
    uvicorn>=0.15.0,<0.16.0

  push.sh: |
    #!/usr/bin/bash

    apt update
    apt install -y git

    git config --global user.email "admin@gitea-http.gitea.svc"
    git config --global user.name "Gitea"
    git config --global init.defaultBranch main

    export TMP_DIR=/tmp/demo-app

    mkdir ${TMP_DIR}

    cp Dockerfile ${TMP_DIR}/.
    cp README.md ${TMP_DIR}/.
    cp Jenkinsfile ${TMP_DIR}/.
    cp main.py ${TMP_DIR}/.
    cp requirements.txt ${TMP_DIR}/.

    cd ${TMP_DIR}

    git init
    git add .
    git commit -m "first commit"
    git remote add origin http://gitea-http.gitea.svc:3000/main/demo-app.git
    git push -u origin main

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-git-credentials
  namespace: gitea
data:
  .netrc: |
    machine gitea-http.gitea.svc
          login {{ username }}
          password {{ password }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-orchestrate
  namespace: gitea
spec:
  template:
    spec:
      volumes:
        - name: gitea-orchestrate-volume
          configMap:
            name: gitea-orchestrate

        - name: gitea-gitops-demo-volume
          configMap:
            name: gitea-gitops-demo

        - name: gitea-app-demo-volume
          configMap:
            name: gitea-app-demo

        - name: gitea-git-credentials-volume
          configMap:
            name: gitea-git-credentials
            items:
              - key: .netrc
                path: .netrc

      containers:
        - name: python
          image: python:3.11.4-slim
          command: ["sh"]
          args:
            - -c
            - pip install -r requirements.txt && python job.py && cd /gitops && bash push.sh && cd /demo-app && bash push.sh

          volumeMounts:
            - mountPath: /job
              name: gitea-orchestrate-volume

            - mountPath: /gitops
              name: gitea-gitops-demo-volume

            - mountPath: /demo-app
              name: gitea-app-demo-volume

            - mountPath: /root/.netrc
              name: gitea-git-credentials-volume
              subPath: .netrc

          workingDir: /job
      restartPolicy: Never
  backoffLimit: 1
  ttlSecondsAfterFinished: 30
